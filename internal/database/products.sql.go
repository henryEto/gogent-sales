// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"
)

const getListOfProducts = `-- name: GetListOfProducts :many
WITH product_sales AS (
  SELECT
    a.vcodpro AS codigo,
    a.vdescri AS descripcion,
    l.vdescri AS linea,
    a.vsublin AS sublinea,
    a.vmarart AS marca,
    SUM(m.vcantid) AS cantidad_vendida,
    COUNT(m.vcodpro) AS num_ventas
  FROM articulos a
  JOIN lineas l ON a.vlinart = l.vlindep
  INNER JOIN movimientosd m
    ON a.vcodpro = m.vcodpro
  WHERE
    a.vtippro = 1
    AND a.vdescri != ''
    AND a.vlinart NOT IN ('9', '13')
    AND STR_TO_DATE(m.vfecham, '%Y-%m-%d') >= CURDATE() - INTERVAL 30 DAY
    AND m.vtipmov = 'caj01'
    AND m.vcantid > 0
  GROUP BY
    a.vcodpro, a.vdescri, l.vdescri, a.vsublin, a.vmarart
)
SELECT
  ps.codigo,
  ps.descripcion,
  ps.linea,
  ps.sublinea,
  ps.marca,
  CAST((ps.cantidad_vendida * 1.0 / SUM(ps.cantidad_vendida) OVER ()) * 70.0 +
  (ps.num_ventas * 1.0 / SUM(ps.num_ventas) OVER ()) * 30.0 AS DECIMAL(10,4)) AS score_popularidad
FROM product_sales ps
WHERE ps.cantidad_vendida > 0
ORDER BY
  score_popularidad DESC
`

type GetListOfProductsRow struct {
	Codigo           string
	Descripcion      string
	Linea            string
	Sublinea         string
	Marca            string
	ScorePopularidad string
}

// sql/queries/products.sql
func (q *Queries) GetListOfProducts(ctx context.Context) ([]GetListOfProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getListOfProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListOfProductsRow
	for rows.Next() {
		var i GetListOfProductsRow
		if err := rows.Scan(
			&i.Codigo,
			&i.Descripcion,
			&i.Linea,
			&i.Sublinea,
			&i.Marca,
			&i.ScorePopularidad,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
